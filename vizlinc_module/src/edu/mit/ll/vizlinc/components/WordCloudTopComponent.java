/*
 * 
 */
package edu.mit.ll.vizlinc.components;

import edu.mit.ll.vizlinc.model.FacetValue;
import edu.mit.ll.vizlinc.ui.elements.WordCloudPanel;
import edu.mit.ll.vizlinc.ui.elements.WrapLayout;
import java.awt.FlowLayout;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays word cloud, an aggregated view of the top entities extracted.
 */
@ConvertAsProperties(
    dtd = "-//edu.mit.ll.vizlinc.components//WordCloud//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "WordCloudTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "filtersmode", openAtStartup = true)
@ActionID(category = "Window", id = "edu.mit.ll.vizlinc.components.WordCloudTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_WordCloudAction",
preferredID = "WordCloudTopComponent")
@Messages(
{
    "CTL_WordCloudAction=WordCloud",
    "CTL_WordCloudTopComponent=WordCloud",
    "HINT_WordCloudTopComponent=This is a WordCloud window"
})
public final class WordCloudTopComponent extends TopComponent
{

    private static final String LAYOUT_A_Z = "A-Z";
    private static final String  LAYOUT_FREQ = "Frequency";
    private static final String  LAYOUT_TYPE_A_Z = "Type/A-Z";
    private static final String[] LAYOUT_COMBO_OPTIONS = new String[]{LAYOUT_A_Z, LAYOUT_FREQ, LAYOUT_TYPE_A_Z};
    
    private static final String  SHOW_FACET_TREE = "Entity Tree";
    private static final String[] SHOW_COMBO_OPTIONS = new String[]{SHOW_FACET_TREE};
    
    private static final String FREQ_MENTIONS = "Mentions";
    private static final String FREQ_DOCS = "Documents";
    private static final String[] FREQ_COMBO_OPTIONS = new String[]{FREQ_MENTIONS, FREQ_DOCS};
    

    
    public WordCloudTopComponent()
    {
        initComponents();
        setName(Bundle.CTL_WordCloudTopComponent());
        setToolTipText(Bundle.HINT_WordCloudTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        //putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        
        //Overiding Netbeans default behavior of changing this panel's layout manager.
        wordCloudPanel1.setLayout(new WrapLayout(FlowLayout.LEFT));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        wordCloudPanel1 = new edu.mit.ll.vizlinc.ui.elements.WordCloudPanel();
        jPanel1 = new javax.swing.JPanel();
        runBtn = new javax.swing.JButton();
        showComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        freqComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sortByComboBox = new javax.swing.JComboBox();
        topNComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        /*
        wordCloudPanel1.setPreferredSize(new java.awt.Dimension(10, 10));
        */
        jScrollPane1.setViewportView(wordCloudPanel1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(runBtn, org.openide.util.NbBundle.getMessage(WordCloudTopComponent.class, "WordCloudTopComponent.runBtn.text")); // NOI18N
        runBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                runBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(runBtn, gridBagConstraints);

        showComboBox.setModel(new DefaultComboBoxModel(SHOW_COMBO_OPTIONS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel1.add(showComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(WordCloudTopComponent.class, "WordCloudTopComponent.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(WordCloudTopComponent.class, "WordCloudTopComponent.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel2, gridBagConstraints);

        freqComboBox.setModel(new DefaultComboBoxModel(FREQ_COMBO_OPTIONS));
        freqComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                freqComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel1.add(freqComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(WordCloudTopComponent.class, "WordCloudTopComponent.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(WordCloudTopComponent.class, "WordCloudTopComponent.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel4, gridBagConstraints);

        sortByComboBox.setModel(new DefaultComboBoxModel(this.LAYOUT_COMBO_OPTIONS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(sortByComboBox, gridBagConstraints);

        topNComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "20", "50", "100", "150", "200" }));
        topNComboBox.setSelectedIndex(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(topNComboBox, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runBtnActionPerformed
    {//GEN-HEADEREND:event_runBtnActionPerformed
       //TODO: Spawn separate thread for this
        //set freq parameter
        setCloudFreqParameter();
        
        setTopN();
        
        setSortBy();
        
        //Get what to display: and display it
        displayTags();
    }//GEN-LAST:event_runBtnActionPerformed

    private void freqComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_freqComboBoxActionPerformed
    {//GEN-HEADEREND:event_freqComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_freqComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox freqComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton runBtn;
    private javax.swing.JComboBox showComboBox;
    private javax.swing.JComboBox sortByComboBox;
    private javax.swing.JComboBox topNComboBox;
    private edu.mit.ll.vizlinc.ui.elements.WordCloudPanel wordCloudPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private List<FacetValue> getFacetValuesInTree()
    {
        FacetedSearchTopComponent searchWin = getFacetedSearchWindow();
        return searchWin.getFacetValuesInFacetTree();
    }
    
     private FacetedSearchTopComponent getFacetedSearchWindow()
    {
        return (FacetedSearchTopComponent)WindowManager.getDefault().findTopComponent("FacetedSearchTopComponent");
    }

    private void displayTags()
    {
        if(this.showComboBox.getSelectedItem().equals(SHOW_FACET_TREE))
        {
            List<FacetValue> fvs = getFacetValuesInTree();
            this.wordCloudPanel1.displayCloudOfEntities(fvs);
        }
    }

    private void setCloudFreqParameter()
    {
       String selected = this.freqComboBox.getSelectedItem().toString();
       if(selected.equals(FREQ_DOCS))
       {
           this.wordCloudPanel1.setTagSizeBasedOn(WordCloudPanel.PARAM_DOCS);
       }
       else if(selected.equals(FREQ_MENTIONS))
       {
           this.wordCloudPanel1.setTagSizeBasedOn(WordCloudPanel.PARAM_MENTIONS);
       }
       else
       {
           throw new UnsupportedOperationException("No valid operation for frequency: " + selected);
       }
    }

    private void setTopN()
    {
        String topNVal = this.topNComboBox.getSelectedItem().toString();
        if(topNVal == null || topNVal.isEmpty())
        {
            wordCloudPanel1.setTopN(WordCloudPanel.TOPN_UNLIMITED);
        }
        else
        {
            int topN = Integer.parseInt(topNVal);
            wordCloudPanel1.setTopN(topN);
        }
    }

    private void setSortBy()
    {
        String selected = this.sortByComboBox.getSelectedItem().toString();
        if(selected.equals(LAYOUT_A_Z))
        {
            wordCloudPanel1.setSortBy(WordCloudPanel.SORT_BY_ALPHA);
        }
        else if(selected.equals(LAYOUT_FREQ))
        {
            wordCloudPanel1.setSortBy(WordCloudPanel.SORT_BY_FREQ);
        }
        else if(selected.equals(LAYOUT_TYPE_A_Z))
        {
            wordCloudPanel1.setSortBy(WordCloudPanel.SORT_BY_ENTITY_TYPE_A_Z);            
        }
        else {
            throw new IllegalArgumentException("Invalid sort by criterion");
        }
    }
}
